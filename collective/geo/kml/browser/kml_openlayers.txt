collective.geo.kml openlayers
=============================

Overview
--------
kml_openlayers is a BrowserView showing an openlayers map for folderish content.
The map will show all geo referenced objects in that folderish object.

Tests
-----
we start the tests with the usual boilerplate
    >>> from Products.Five.testbrowser import Browser
    >>> browser = Browser()
    >>> portal_url = self.portal.absolute_url()
    >>> folder_url = self.folder.absolute_url()
    >>> self.portal.error_log._ignored_exceptions = ()

we log in for tests in user member area
    >>> from Products.PloneTestCase.setup import portal_owner, default_password
    >>> browser.open(portal_url)
    >>> browser.getControl(name='__ac_name').value = portal_owner
    >>> browser.getControl(name='__ac_password').value = default_password
    >>> browser.getControl(name='submit').click()

we can set kml_openlayers view as default view for Folder
    >>> browser.open(folder_url)
    >>> browser.getLink('Kml Openlayers View').click()

in this view we can see a div that contains the openlayers map
    >>> '<div id="map" ' in browser.contents
    True

openlayers javascript,
    >>> '<script type="text/javascript" src="./OpenLayers.js"></script>' in browser.contents
    True

generic collective.geo javascript,
    >>> '<script type="text/javascript" src="++resource++geo-openlayers.js">' in browser.contents
    True

kml_openlayers javascript, 
    >>> '<script type="text/javascript" src="++resource++geo.kml.javascripts/kml_openlayers.js">' in browser.contents
    True

Openlayers css, 
    >>> '<link href="++resource++openlayers.css" rel="stylesheet" type="text/css" />' in browser.contents
    True

and 'Download KML' link
    >>> '<a href="'+folder_url+'/@@kml-document"\n               title="Download the KML file associated with this content">Download KML</a>' in browser.contents
    True

in the default configuration we use a google maps layer and must include google maps javascript
    >>> "http://maps.google.com/maps?file=api&amp;v=2&amp;key=" in browser.contents
    True

and parameter for geo-openlayers.js
    >>> "var googlemaps = true" in browser.contents
    True

We can also check to see if we're able to view the KML view without it being
our default folder view.  First, we reset our view back a standard folder
view.

    >>> browser.open(folder_url)
    >>> browser.getLink('Standard view').click()

Now, we try and load the KML view without setting it as default

    >>> browser.open(folder_url+'/kml-openlayers')

Finally, we can see a div that contains the openlayers map
    >>> '<div id="map" ' in browser.contents
    True

openlayers javascript,
    >>> '<script type="text/javascript" src="./OpenLayers.js"></script>' in browser.contents
    True

generic collective.geo javascript,
    >>> '<script type="text/javascript" src="++resource++geo-openlayers.js">' in browser.contents
    True

kml_openlayers javascript,
    >>> '<script type="text/javascript" src="++resource++geo.kml.javascripts/kml_openlayers.js">' in browser.contents
    True

and Openlayers css
    >>> '<link href="++resource++openlayers.css" rel="stylesheet" type="text/css" />' in browser.contents
    True


The openlayers view can be enabled also for Topic and for Large Plone Folder.
We have a Topic in portal root for testing that
    >>> topic_url = self.portal.test_topic.absolute_url()
    >>> browser.open(topic_url)
    >>> browser.getLink('Kml Openlayers View').click()

now we run the same test with a Large Plone Folder in portal root
    >>> largefolder_url = self.portal.test_largefolder.absolute_url()
    >>> browser.open(largefolder_url)
    >>> browser.getLink('Kml Openlayers View').click()

